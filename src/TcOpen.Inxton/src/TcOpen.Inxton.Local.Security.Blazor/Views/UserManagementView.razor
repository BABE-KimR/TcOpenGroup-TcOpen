@namespace TcOpen.Inxton.Local.Security.Blazor
<h3>UserManagementView</h3>

<div >
    <div class="row">
        <div class="col card">
            <table class="table table-hover" style=" height: 400px !important; overflow: scroll;">
                <thead>
                    <tr>
                        <th scope="col">Username</th>
                        <th scope="col">Can change password</th>
                        <th scope="col">Created</th>
                        <th scope="col">Modified</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in _userManager.Users)
                    {
                        <tr @onclick="@(() => RowClicked(user))">
                            <th>@user.UserName</th>
                            <td>@user.CanUserChangePassword</td>
                            <td>created</td>
                            <td>modified</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="col">
            @if (SelectedUser != null)
            {
                <label>
                    Identifier:
                    <p>@SelectedUser.UserName</p>
                </label>

                <div class="row">
                    <div class="col-5 card">
                        <label>Available roles:</label>
                        @if (AvailableRoles != null)
                        {
                        <div class="list-group ">
                            @foreach (var role in AvailableRoles)
                            {
                            <label class="list-group-item">
                                <input class="form-check-input me-1"
                                       type="checkbox"
                                       @onclick="@(() => AvaiableRoleCliked(role))"
                                       value="@SelectedAvailableRoles.Contains(role)">
                                @role
                            </label>
                            }

                        </div>
                        }
                    </div>
                    <div class="col-2">
                        <button class="btn btn-primary" 
                                @onclick="@(() => AssignRoles())">Assign</button>
                        <button class="btn btn-primary"
                                @onclick="@(() => ReturnRoles())">Return</button>
                    </div>
                    <div class="col-5 card">
                        <label>Assigned roles:</label>
                        @if (AssignedRoles != null)
                        {
                        <div class="list-group">
                            @foreach (var role in AssignedRoles)
                            {
                                <label class="list-group-item">
                                    <input class="form-check-input me-1" 
                                           type="checkbox" 
                                           @onclick="@(() => AssignedRoleCliked(role))"
                                           value="@AssignedRoles.Contains(role)">
                                    @role
                                </label>
                            }

                        </div>
                        }
                    </div>

                </div>

            }
        </div>
        
    </div>
</div>




@code {
    private User SelectedUser { get; set; }
    private IList<string> AvailableRoles { get; set; }
    private IList<string> SelectedAvailableRoles { get; set; } = new List<string>();
    private IList<string> AssignedRoles { get; set; }
    private IList<string> SelectedAssignedRoles { get; set; } = new List<string>();

    public async Task AssignRoles()
    {
        await _userManager.AddToRolesAsync(SelectedUser, SelectedAvailableRoles);
        SelectedAvailableRoles.Clear();
        SelectedAssignedRoles.Clear();
        await RowClicked(SelectedUser);
        //_authenticationStateProvider.NotifyAuthenticationStateChanged();
        //foreach (var role in SelectedAvailableRoles)
        //{
        //    AssignedRoles.Add(role);
        //}

    }

    public async Task ReturnRoles()
    {
        await _userManager.RemoveFromRolesAsync(SelectedUser, SelectedAssignedRoles);
        SelectedAvailableRoles.Clear();
        SelectedAssignedRoles.Clear();
        await RowClicked(SelectedUser);
       // _authenticationStateProvider.NotifyAuthenticationStateChanged();
        //foreach (var role in SelectedAssignedRoles)
        //{
        //    AvailableRoles.Add(role);
        //}

    }

    public void AvaiableRoleCliked(string role)
    {
        if (SelectedAvailableRoles.Contains(role))
        {
            SelectedAvailableRoles.Remove(role);
        }
        else
        {
            SelectedAvailableRoles.Add(role);
        }

    }

    public void AssignedRoleCliked(string role)
    {
        if (SelectedAssignedRoles.Contains(role))
        {
            SelectedAssignedRoles.Remove(role);
        }
        else
        {
            SelectedAssignedRoles.Add(role);
        }

    }

    public async Task RowClicked(User user)
    {
        SelectedUser = user;
        AssignedRoles = await _userManager.GetRolesAsync(user);
        AvailableRoles = _roleManager.Roles.Where(x => !AssignedRoles.Contains(x.Name))
                .Select(x => x.Name)
                .ToList();

    }
}
