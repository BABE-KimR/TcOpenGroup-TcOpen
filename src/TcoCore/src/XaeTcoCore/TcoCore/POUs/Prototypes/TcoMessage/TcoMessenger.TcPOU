<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TcoMessenger" Id="{bb89b26f-ec79-4812-bab7-3579b2b6d1be}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Provides mechanism for delivering static messages to the supervising applications (SCADA/HMI).	
				<remarks>			
					<note type="important">
						Each messenger has a single placeholder for the message; it stores the most important message from the last context cycle. 
						If there are more messages in a single cycle for the same messenger then less important messages are discarded and replaced by 
						the message with the category of higher severity.	
					</note>
				</remarks>			 
			</summary>			
		
		</docu>
~*)
FUNCTION_BLOCK PUBLIC TcoMessenger IMPLEMENTS ITcoMessenger
VAR			
	(*~
		<docu>
			<summary>
				Most important message of this instance of messenger; stores the most important message from the last context cycle. 
				If there are more messages in a single cycle for the same
				messenger then less important messages are discarded and replaced by the message with the category of higher severity.			 
			</summary>			
		</docu>
	~*)
	_mime : TcoMessage;
	_Parent : ITcoObject;
	_contextIdentity : ULINT;	
	_mds : ARRAY[0..MDS_MAX_INDEX] OF WORD;	
	_previousCycleMessageCount : INT;	
END_VAR

VAR CONSTANT
	MDS_MAX_INDEX : INT := 3;
END_VAR

VAR_STAT
	crcTableCalcDone : BOOL;
	crctable16 : ARRAY[0..255] OF WORD;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Messages" Id="{56442304-2644-4fe1-b5d1-eb5248dd12e5}" />
    <Method Name="CalcCRC16" Id="{0c49dfd0-f962-0c1a-34a6-d7eae3d0d93b}">
      <Declaration><![CDATA[METHOD CalcCRC16 : WORD
VAR_INPUT
	ptrAdr : POINTER TO BYTE;
	cbLen : INT;
	previous : WORD;
END_VAR
VAR CONSTANT
	generator : WORD := 16#1021;
END_VAR

VAR
	_byte : BYTE;
    _tmp : BYTE;	
	_crc  : WORD;
	_pos : BYTE;
	_index : INT;
	_ptrCalc : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_crc := previous;
_ptrCalc := ptrAdr;

FOR _index := 1 TO cbLen DO
	_ptrCalc := _ptrCalc + 1;	
	_byte := _ptrCalc^;	
	_pos := UINT_TO_BYTE(SHR(_crc,8) XOR _byte); 	
	_crc := SHL(_crc,8) XOR crctable16[_pos];
END_FOR

CalcCRC16 := _crc;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalcSlowCRC16" Id="{b5b12890-7a80-0f94-2732-4c93f2ab132d}">
      <Declaration><![CDATA[METHOD CalcSlowCRC16 : WORD
VAR_INPUT
	ptrAdr : POINTER TO BYTE;
	cbLen : INT;
END_VAR
VAR CONSTANT
	generator : WORD := 16#1021;
END_VAR

VAR
	_byte : BYTE;
	_tmpByte : WORD;
	crc  : WORD;
	_index : INT;
	_index2 : INT;
	_ptrCalc : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[crc := 16#0;

//IF cbLen > 0 THEN
//ptrData := dwSrcAddr;

//FOR iIdx := 1 TO cbLen DO
//dataWord := BYTE_TO_UINT(ptrData^); (* cast next data byte to word *)
//ptrData := ptrData + 1; (* increase data ptr *)
//wChkSum_I := wChkSum_I + dataWord; (* New_ChkSum := Old ChkSum + Data_Byte *)
//END_FOR
//END_IF

_ptrCalc := ptrAdr;

FOR _index := 1 TO cbLen DO
	_ptrCalc := _ptrCalc + 1;	
	_byte := _ptrCalc^;	
    _tmpByte := SHL(_byte,8);
	crc := crc XOR _tmpByte; 
	
	FOR	_index2 := 0 TO 8 DO
		IF((crc AND 16#8000) <> 0) THEN
			_tmpByte := SHL(crc,1);
			crc := crc XOR generator;
		ELSE
		    crc := SHL(crc, 1);
		END_IF; 
	END_FOR	
END_FOR

CalcSlowCRC16 := crc;
//PUBLIC static ushort Compute_CRC16_Simple(BYTE[] bytes)
//{
//    {const ushort generator = 0x1021; /* divisor is 16BIT */}
//    ushort crc = 0; /* CRC value is 16bit */

//    foreach (byte b in bytes)
//    {
//        crc ^= (ushort(b << 8); /* move byte into MSB of 16bit CRC */

//        for (int i = 0; i < 8; i++)
//        {
//            if ((crc & 0x8000) != 0) /* test for MSB = bit 15 */
//            {
//                crc = (ushort((crc << 1) ^ generator);
//            }
//            else
//            {
//                crc <<= 1;
//            }
//        }
//    }

//    return crc;
//}]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalcTableCRC16" Id="{7e0523e7-d0a0-0053-1c4a-700fd2118f0b}">
      <Declaration><![CDATA[METHOD CalcTableCRC16
VAR_INPUT
END_VAR
VAR CONSTANT
	generator : WORD := 16#1021;
END_VAR
VAR	
	_divident : INT;
	_bit : INT;
	_curByte : WORD;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(crcTableCalcDone) THEN  RETURN; END_IF;

FOR _divident := 0 TO 255 DO
	_curByte := SHL(_divident,8);
	
	FOR _bit := 0 TO 8 DO
		IF (_curByte AND 16#8000) <> 0 THEN            
                _curByte := SHL(_curByte,1);
                _curByte := _curByte XOR generator;            
         ELSE            
                _curByte := SHL(_curByte, 1);
        END_IF;    
	END_FOR
	
	crctable16[_divident] := _curByte;
END_FOR

crcTableCalcDone := TRUE;
(*
public static void CalculateTable_CRC16()
{
    const ushort generator = 0x1021;
    crctable16 = new ushort[256];

    for (int divident = 0; divident < 256; divident++) /* iterate over all possible input byte values 0 - 255 */
    {
        ushort curByte = (ushort(divident << 8); /* move divident byte into MSB of 16Bit CRC */

        for (byte bit = 0; bit < 8; bit++)
        {
            if ((curByte & 0x8000) != 0)
            {
                curByte <<= 1;
                curByte ^= generator;
            }
            else
            {
                curByte <<= 1;
            }
        }

        crctable16[divident] = curByte;
    }
}
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="Catastrophic" Id="{3ead99e7-d4fa-03f6-3060-81990c2076df}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'catastrophic' category to the message queue.
				Use this category when there is a situation when the device cannot continue operations due to irrecoverable failure.				 
			</summary>		
		</docu>
~*)
METHOD PUBLIC Catastrophic
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Catastrophic);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{640fefd4-a9aa-0de1-3f5c-cce4bd50449f}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Clears the message content.
				<remarks>			
					<note type="important">
						This method is exposed for Rpc calls, for testing purposes. Rpc calls of this method must not be used in production code
					</note>
				</remarks>								 
			</summary>		
		</docu>
~*)
{attribute 'TcRpcEnable'}
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_mime.TimeStamp :=  DT#1970-01-01-00:00;
_mime.Text := '';
_mime.Identity := 0;
_mime.Category := eMessageCategory.All;
_mime.Cycle := 0;	
_mime.PerCycleCount := 0;	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Compose" Id="{3447ad14-6768-48d6-b294-87e00174ef1e}">
      <Declaration><![CDATA[METHOD PROTECTED Compose : TcoMessage
VAR_INPUT
	Text : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
	Category : eMessageCategory;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_Parent <> 0 AND_THEN _Parent.Context <> 0 AND_THEN _Parent.Context.RealTimeClock <> 0) THEN
	Compose.TimeStamp :=  _Parent.Context.RealTimeClock.NowLocal();	
	Compose.Text := Text;
	Compose.Identity := _Parent.Identity;
	Compose.Category := Category;
	Compose.Cycle := _Parent.Context.StartCycleCount;	
END_IF;





]]></ST>
      </Implementation>
    </Method>
    <Method Name="Critical" Id="{a9264967-6c30-0c25-362d-a0380aaea992}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'critical' category to the message queue.
				Use this category when a critical error occured, that is not recoverable by the means of software (reset/restore) and a detailed inspection is required.				 
			</summary>		
		</docu>
~*)
METHOD PUBLIC Critical
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Critical);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Debug" Id="{bd0230f7-b5de-4707-ba4a-f8b17cc23976}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'debug' category to the message queue.	
			    Use when you need to report debug information for you as programmer. 			 
			</summary>		
		</docu>
~*)
METHOD PUBLIC Debug
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Debug);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Error" Id="{dc14c403-f11e-4200-ac36-567c3d997bf6}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'error' category to the message queue.
				Use this categoty when there is a failure that cannot be immediately recovered and an intervention is needed. This is typically a situation when a device fails
				to deliver expected result. 
				Do not use this category to report information about failed process like measurement or detection.				 
			</summary>						
		</docu>
~*)
METHOD PUBLIC Error
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{23bbd1ba-9be3-4c0b-a177-bc9de93be447}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : ITcoObject;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Parent := Parent;
_contextIdentity := Parent.Identity;

CalcTableCRC16();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Info" Id="{d1f4840f-86c5-482b-8fb7-443b9b1c585c}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'information' category to the message queue.	
				Use when you want to deliver information to the user, that has only informative character and does not adversely affect a process.			 
			</summary>			
		</docu>
~*)
METHOD PUBLIC Info 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Info);]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogIfFreshMessage" Id="{0b6b2fe7-cb26-02a6-0b72-2570a4f5cb53}">
      <Declaration><![CDATA[METHOD PRIVATE LogIfFreshMessage : BOOL
VAR_IN_OUT
	inMessage : TcoMessage;
END_VAR
VAR
	_index : INT;
	_mdIntermediate : WORD;
	_md_nextMessage : WORD;
	_md_currentMessage : WORD;
    _messageTextLenght : INT;
	_messageLenght : UDINT;
	_message : ARRAY[0..255] OF BYTE;
    _ptrMessage : POINTER TO STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT) := ADR(_message);	
	_ptrCategory : POINTER TO INT;
	_ptrCycle : POINTER TO ULINT;			
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogIfFreshMessage := TRUE;
_messageTextLenght := LEN(inMessage.Text);
_ptrMessage^ := LEFT(inMessage.Text, LEN(inMessage.Text));
_ptrCategory := _ptrMessage + INT_TO_DWORD(_messageTextLenght);
_ptrCategory^ := inMessage.Category;
_ptrCycle := _ptrCategory + 2;
_ptrCycle^ :=  inMessage.Cycle;
_messageLenght := _messageTextLenght + 2;


inMessage.MessageDigest16 :=  CalcCRC16(ptrAdr := _ptrMessage, cbLen := _messageTextLenght, previous := 16#0000);
_mdIntermediate := CalcCRC16(ptrAdr := _ptrMessage, cbLen := 2, previous := inMessage.MessageDigest16);
_md_currentMessage := CalcCRC16(ptrAdr := _ptrCycle, cbLen := 8, _mdIntermediate);
_ptrCycle^ :=  inMessage.Cycle + 1;
_md_nextMessage := CalcCRC16(ptrAdr := _ptrCycle, cbLen := 8, _mdIntermediate);


FOR _index := 0 TO MDS_MAX_INDEX DO
	IF(_mds[_index] = _md_currentMessage)THEN
		IF(inMessage.PerCycleCount <= THIS^.MDS_MAX_INDEX) THEN
			_mds[inMessage.PerCycleCount] := _md_nextMessage;
		END_IF;	
		LogIfFreshMessage := FALSE;
		RETURN;
	END_IF	
END_FOR

IF(inMessage.PerCycleCount <= THIS^.MDS_MAX_INDEX) THEN
	_mds[inMessage.PerCycleCount] := _md_nextMessage;
END_IF;	



_Parent.Context.Logger.Push(inMessage);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Notify" Id="{1595dfe7-5719-459e-bdf2-0e7976c85511}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'notification' category to the message queue.
				Use this category when you want to report a notification that may be of interest to the user, but does not adveresly affect a process.			 
			</summary>				
		</docu>
~*)
METHOD Notify 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Notification);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Post" Id="{7e1c7e2b-5612-469e-9139-08754fd973ea}">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Creates message of given category for this messenger.				 
			</summary>				
		</docu>
~*)
METHOD PUBLIC Post 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
	(*~
		<docu>
			<summary>
				Message category.			 
			</summary>			
		</docu>
	~*)
	Category : eMessageCategory;	
END_VAR

VAR
	_wouldBeMime : TcoMessage;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(_Parent <> 0 AND_THEN _Parent.Context <> 0 AND_THEN _Parent.Context.Environment <> 0 AND_THEN _Parent.Context.Environment.Messaging <> 0) THEN
	IF(Category < THIS^._Parent.Context.Environment.Messaging.MinLevel
	  OR _Parent.Context.Environment.Messaging.IsSuspended) THEN
		RETURN;
	END_IF; 	
		
	_mime.PerCycleCount := _mime.PerCycleCount + 1;
	_wouldBeMime := Compose(Message, Category);		
	_wouldBeMime.PerCycleCount := _mime.PerCycleCount;
			
    // Same cycle filter for most important messge.
	IF(_mime.Cycle = _Parent.Context.StartCycleCount) THEN		 	
		IF(_wouldBeMime.Category > _mime.Category) THEN	 
			_mime := _wouldBeMime;
		END_IF;
	ELSE
	// Different cycle		
		_wouldBeMime.PerCycleCount := 1;	
		_mime := _wouldBeMime;		
	END_IF;	

	LogIfFreshMessage(_wouldBeMime);		
END_IF;	



]]></ST>
      </Implementation>
    </Method>
    <Method Name="Programming" Id="{1f1b6a21-6158-44a7-b79e-b3fcea42c4e1}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'programming error' category to the message queue.	
				Use this category to inform about a possible programming error, defect in settings or missing information at a level of programming or system or process settings.			 
			</summary>				
		</docu>
~*)
METHOD PUBLIC Programming
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.ProgrammingError);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Trace" Id="{5a17dee2-c171-4127-9ee1-30d4a06a53bf}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'trace' category to the message queue.	
				Use when you need to track detailed information about internal states of the program for detailed visibility. 
				This is lowest level of category that can be used in production, for detailed observation of PLC program.			 
			</summary>					
		</docu>
~*)
METHOD PUBLIC Trace 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Trace);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Warning" Id="{dd00674c-7475-44d4-8400-894897951e0b}" FolderPath="Messages\">
      <Declaration><![CDATA[(*~
		<docu>
			<summary>
				Adds message of 'warning' category to the message queue.
				Use this category when you want to report to the user an information about a possible problem, that may adversly affect a process.
				Information in this cateogory aims to help the user to identify a problem, the cause of such problem does not necessarily stops the process.				 
			</summary>					
		</docu>
~*)
METHOD PUBLIC Warning 
VAR_INPUT
	(*~
		<docu>
			<summary>
				Arbitrary message string.			 
			</summary>			
		</docu>
	~*)
	Message : STRING(TcoMessengerSettings.MAX_MESSAGE_TEXT_LENGHT);
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Post(Message, eMessageCategory.Warning);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>