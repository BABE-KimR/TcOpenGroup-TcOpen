<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="RemoteTask" Id="{3738faf1-80a5-039e-38b6-48e768300728}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK RemoteTask EXTENDS TcoCore.TcoTask
VAR
	{attribute clr [RenderIgnore()]}
	_isInitialized : BOOL;	
	{attribute clr [RenderIgnore()]}
	_hasException : BOOL;	
	{attribute clr [RenderIgnore()]}
	_startSignature : STRING;	
	{attribute clr [RenderIgnore()]}
	_doneSignarure : STRING;
	
	IS_RTC_VALID : BOOL;
RTCx : ULINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF (_invokeRequest) THEN
    IF (NOT THIS^._isInitialized) THEN
        Messenger.Programming('Remote call not initialized.');
    END_IF;
END_IF

IF (THIS^._hasException) THEN
    Messenger.Error('Remote execution produced an exception');
    _startSignature := '';
END_IF;

DoneWhen(_startSignature <> '' AND_THEN _startSignature = _doneSignarure);
ThrowWhen(THIS^._hasException);
]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{dc9a8f58-f99b-0a86-0286-db6e53883867}">
      <Declaration><![CDATA[METHOD PUBLIC FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : ITcoObject;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.FB_init(bInitRetains := bInitRetains, bInCopyCode := bInCopyCode, Parent := Parent);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Invoke" Id="{160d2615-185d-040e-0db3-5236894fca1a}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Use to start the execution of the task. The starting is possible from Ready state.
			<para>Moreover it is also possible to start the task again from Done state by performing the '''rising edge''' of the calling of the Invoke() method.</para>
			<p>Analogously to the xExecute signal of the <a href="https://plcopen.org/sites/default/files/downloads/creating_plcopen_compliant_function_block_libraries.pdf" title="Title"> PLCopen </a> motion function blocks.</p>			
		</summary>			
	</docu>	
~*)
METHOD Invoke : ITcoTaskStatus
VAR
    _newInvokeCall : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _startSignature = '' AND THIS^.Context.Rtc.IsValid THEN
    _startSignature := LINT_TO_STRING(THIS^.Context.Rtc.TickClock());
	Invoke := SUPER^.Invoke();
END_IF;



IS_RTC_VALID := THIS^.Context.Rtc.IsValid;

IF IS_RTC_VALID THEN
	RTCx := THIS^.Context.Rtc.TickClock();
END_IF


Invoke := THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Restore" Id="{b0fbafe3-08ed-012b-384f-b833634311e2}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Restores this instance to the Ready state. Can be called explicitly or from within one of the restore mechanisms.
			<para>
				See also <see cref="TcoTask.PlcTcoTask.AutoRestorable()"/>
			</para>
		</summary>			
	</docu>	
~*)
METHOD Restore : ITcoRestorable]]></Declaration>
      <Implementation>
        <ST><![CDATA[_startSignature := '';
_doneSignarure := '';	
_hasException := FALSE;
Restore := SUPER^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>