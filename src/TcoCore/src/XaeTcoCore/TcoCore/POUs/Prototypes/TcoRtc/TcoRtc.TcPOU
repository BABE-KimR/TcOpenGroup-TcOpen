<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="TcoRtc" Id="{44984f17-252b-05a5-3965-3576c168912a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC TcoRtc IMPLEMENTS ITcoRtc
VAR_STAT
	{attribute 'hide'}
	_RtcSynchParams						:	RtcSynchParams;			
	{attribute 'hide'}
	_isValid							:	BOOL := FALSE;
	{attribute 'hide'}
	_state								:	UINT;
	{attribute 'hide'}
	_syncAmsIdIsLocale					:	BOOL;
	{attribute 'hide'}
	_FB_GetLocalAmsNetId 				: 	Tc2_Utilities.FB_GetLocalAmsNetId;
	{attribute 'hide'}
	_FB_GetTimeZoneInformation			:	Tc2_Utilities.FB_GetTimeZoneInformation;
	{attribute 'hide'}
	_FB_SetTimeZoneInformation			:	Tc2_Utilities.FB_SetTimeZoneInformation;
	{attribute 'hide'}
	_TimeZoneInformation				:	Tc2_Utilities.ST_TimeZoneInformation;
	{attribute 'hide'}
	_TimeZoneID							:	Tc2_Utilities.E_TimeZoneID;
	{attribute 'hide'}
	_startTime							:	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_endTime							:	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_getOffset							:	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_setOffset							:	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_NT_GetSyncTime						: 	Tc2_Utilities.NT_GetTime;
	{attribute 'hide'}
	_NT_SetLocalTime 					: 	Tc2_Utilities.NT_SetLocalTime;
	{attribute 'hide'}
	_NT_GetLocalTime					: 	Tc2_Utilities.NT_GetTime;
	{attribute 'hide'}
	_LocalTime 							:	Tc2_Utilities.TIMESTRUCT;
	{attribute 'hide'}
	_UTCTime 							:	Tc2_Utilities.TIMESTRUCT;
	{attribute 'hide'}
	_LocalTimeDT						:	DATE_AND_TIME;
	{attribute 'hide'}
	_UTCTimeDT 							:	DATE_AND_TIME;
	{attribute 'hide'}
	_FB_TzSpecificLocalTimeToSystemTime :	Tc2_Utilities.FB_TzSpecificLocalTimeToSystemTime;
	{attribute 'hide'}
	_remote2localDiff					:	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_offset								:	ULINT;
	{attribute 'hide'}
	_syncCounter						:	ULINT;
	{attribute 'hide'}
	_lastSyncTick						: 	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_timeTick							: 	Tc2_EtherCAT.T_DCTIME64;
	{attribute 'hide'}
	_RTC_EX2							:	RTC_EX2;	
	{attribute 'hide'}
	_PDT	 							:	Tc2_Utilities.TIMESTRUCT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="IsValid" Id="{0b73d0fb-6a2d-0c9e-3da7-384d62e156b5}">
      <Declaration><![CDATA[PROPERTY IsValid : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f1495f6e-f4ab-08bd-138d-164d6df2166a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := _isValid;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="NowLocal" Id="{ba634665-0212-047c-1c1d-6ebb5a5f30b5}">
      <Declaration><![CDATA[METHOD NowLocal : DATE_AND_TIME
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _isValid THEN
	NowLocal := _LocalTimeDT;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="NowLocalAsTIMESTRUCT" Id="{e9fe0ffa-a159-017e-3bd5-9e67f37e7fa9}">
      <Declaration><![CDATA[METHOD NowLocalAsTIMESTRUCT : Tc2_Utilities.TIMESTRUCT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _isValid THEN
	NowLocalAsTIMESTRUCT := _LocalTime;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="NowUTC" Id="{34a4b82c-d3a2-0332-3148-6e27e32eec88}">
      <Declaration><![CDATA[METHOD NowUTC : DATE_AND_TIME
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _isValid THEN
	NowUTC := _UTCTimeDT;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="NowUTCAsTIMESTRUCT" Id="{6c922f94-0952-07e6-0cac-83326b01c28c}">
      <Declaration><![CDATA[METHOD NowUTCAsTIMESTRUCT : Tc2_Utilities.TIMESTRUCT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _isValid THEN
	NowUTCAsTIMESTRUCT := _UTCTime;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="RtcSynchParams" Id="{b04a98c0-f35d-0885-0560-168bc0d55c2c}">
      <Declaration><![CDATA[PROPERTY RtcSynchParams : RtcSynchParams]]></Declaration>
      <Get Name="Get" Id="{b4cdc5ff-8d88-0b4c-0de5-bfaa3fd2182c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[RtcSynchParams :=  _RtcSynchParams;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{757baeb2-5395-046e-24d5-a8962693357c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF RtcSynchParams.synchContextIdentity <> 0 AND _RtcSynchParams.synchContextIdentity = 0 THEN
	_RtcSynchParams.synchContextIdentity := RtcSynchParams.synchContextIdentity; 
	_state := 0;
END_IF

IF _RtcSynchParams.synchContextIdentity <> 0 AND _RtcSynchParams.synchContextIdentity = RtcSynchParams.synchContextIdentity THEN
	_RtcSynchParams.doSynch := RtcSynchParams.doSynch;
	_RtcSynchParams.syncAmsId := RtcSynchParams.syncAmsId;
	_RtcSynchParams.syncPeriod := RtcSynchParams.syncPeriod;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="TickClock" Id="{1cdfb043-4f81-0904-37ac-2a0334c75a58}">
      <Declaration><![CDATA[METHOD TickClock : ULINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TickClock := Tc2_EtherCAT.F_GetActualDcTime64();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update" Id="{0bf459e2-db45-0e5b-3d87-31081b5a02e2}">
      <Declaration><![CDATA[METHOD Update
VAR_INPUT
	inContextIdentity	: ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF _NT_GetLocalTime.ERR THEN
	_NT_GetLocalTime(START := FALSE);
	_isValid := FALSE;
	RETURN;	
END_IF

IF _RtcSynchParams.synchContextIdentity <>0 AND _RtcSynchParams.synchContextIdentity = inContextIdentity THEN
	IF _state = 0 THEN
		IF _RtcSynchParams.doSynch THEN
			_isValid := FALSE;
			_state := _state + 10;
		ELSE 
			_isValid := FALSE;
			_state := 210;
		END_IF
	END_IF
	
	IF _state = 10 THEN
		_FB_GetLocalAmsNetId(bExecute := TRUE);
		IF _FB_GetLocalAmsNetId.bBusy AND NOT _FB_GetLocalAmsNetId.bError THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 20 THEN
		_FB_GetLocalAmsNetId(bExecute := FALSE);
		IF NOT _FB_GetLocalAmsNetId.bBusy AND NOT _FB_GetLocalAmsNetId.bError THEN
			_state := _state + 10;
		END_IF
	
	END_IF
	
	IF _state = 30 THEN
		_syncAmsIdIsLocale := 	_RtcSynchParams.syncAmsId = _FB_GetLocalAmsNetId.AddrString OR 
								_RtcSynchParams.syncAmsId = '127.0.0.1.1.1' OR 
								_RtcSynchParams.syncAmsId = '';
		_state := _state + 10;
	END_IF
	
	IF _state = 40 THEN
		_startTime := Tc2_EtherCAT.F_GetActualDcTime64();
		_state := _state + 10;
	END_IF
	
	IF _state = 50 THEN
		_FB_GetTimeZoneInformation(sNetID := _RtcSynchParams.syncAmsId, bExecute := TRUE);
		IF _FB_GetTimeZoneInformation.bBusy AND NOT _FB_GetTimeZoneInformation.bError THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 60 THEN
		_FB_GetTimeZoneInformation(bExecute := FALSE);
		IF NOT _FB_GetTimeZoneInformation.bBusy AND NOT _FB_GetTimeZoneInformation.bError THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 70 THEN
		_TimeZoneInformation := _FB_GetTimeZoneInformation.tzInfo;
		_TimeZoneID := _FB_GetTimeZoneInformation.tzID;
		_endTime := Tc2_EtherCAT.F_GetActualDcTime64();
		_getOffset := (_endTime - _startTime ) / 2;
		_state := _state + 10;
	END_IF
	
	IF _state = 80 THEN
		IF _syncAmsIdIsLocale THEN
			_state := 180;
		ELSE
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 90 THEN
		_startTime := Tc2_EtherCAT.F_GetActualDcTime64();
		_state := _state + 10;
	END_IF
	
	IF _state = 100 THEN
		_FB_SetTimeZoneInformation(sNetID := '127.0.0.1.1.1', tzInfo := _TimeZoneInformation , bExecute := TRUE);
		IF _FB_SetTimeZoneInformation.bBusy AND NOT _FB_SetTimeZoneInformation.bError THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 110 THEN
		_FB_SetTimeZoneInformation(bExecute := FALSE);
		IF NOT _FB_SetTimeZoneInformation.bBusy AND NOT _FB_SetTimeZoneInformation.bError THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 120 THEN
		_endTime := Tc2_EtherCAT.F_GetActualDcTime64();
		_setOffset := (_endTime - _startTime ) / 2;
		_state := _state + 10;
	END_IF
	
	IF _state = 130 THEN
		_NT_GetSyncTime(NETID := _RtcSynchParams.syncAmsId, START := TRUE);
		IF _NT_GetSyncTime.BUSY AND NOT _NT_GetSyncTime.ERR THEN 
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 140 THEN
		_NT_GetSyncTime(START := FALSE);
		IF NOT _NT_GetSyncTime.BUSY AND NOT _NT_GetSyncTime.ERR THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 150 THEN
		_NT_GetSyncTime(START := FALSE);
		_offset := LREAL_TO_ULINT(ULINT_TO_LREAL(_getOffset + _setOffset) / 1000000) * 1000000;
		_offset := _offset + Tc2_EtherCAT.SYSTEMTIME_TO_DCTIME64(_NT_GetSyncTime.TIMESTR,0,0) + _getOffset + _setOffset;	
		_LocalTime := Tc2_EtherCAT.DCTIME64_TO_SYSTEMTIME(_offset);
		_state := _state + 10;
	END_IF
	
	IF _state = 160 THEN
		_NT_GetSyncTime(START := FALSE);
		_NT_SetLocalTime(	NETID := '127.0.0.1.1.1', 
							TIMESTR := _LocalTime,
							START := TRUE);
		IF _NT_SetLocalTime.BUSY AND NOT _NT_SetLocalTime.ERR THEN 
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 170 THEN
		_NT_GetSyncTime(START := FALSE);
		_NT_SetLocalTime(START := FALSE);
		IF NOT _NT_SetLocalTime.BUSY AND NOT _NT_SetLocalTime.ERR THEN
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 180 THEN
		_NT_GetSyncTime(NETID := _RtcSynchParams.syncAmsId, START := TRUE);
		_NT_GetLocalTime(NETID := '127.0.0.1.1.1', START := TRUE);
		IF _NT_GetSyncTime.BUSY AND NOT _NT_GetSyncTime.ERR AND NOT _NT_GetLocalTime.ERR THEN 
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 190 THEN
		_NT_GetSyncTime(START := FALSE);
		_NT_GetLocalTime(START := FALSE);
		IF NOT _NT_GetSyncTime.BUSY AND NOT _NT_GetSyncTime.ERR AND NOT _NT_GetLocalTime.BUSY AND NOT _NT_GetLocalTime.ERR THEN 
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 200 THEN
		_remote2localDiff := Tc2_EtherCAT.SYSTEMTIME_TO_DCTIME64(_NT_GetSyncTime.TIMESTR,0,0) -  Tc2_EtherCAT.SYSTEMTIME_TO_DCTIME64(_NT_GetLocalTime.TIMESTR,0,0);
	
		_NT_GetSyncTime(START := FALSE);
		_NT_GetLocalTime(START := FALSE);
		_NT_SetLocalTime(START := FALSE);
	
		_LocalTime := _NT_GetLocalTime.TIMESTR;
		_FB_TzSpecificLocalTimeToSystemTime(in 		:=	_LocalTime,
											tzInfo 	:=	_TimeZoneInformation,
											out		=>	_UTCTime,
											eTzID	=>	_TimeZoneID);
	
		_lastSyncTick := Tc2_EtherCAT.F_GetActualDcTime64(); 	
	
		_syncCounter := _syncCounter + 1;
		_state := _state + 10;
	END_IF
	
	IF _state = 210 THEN
		_NT_GetLocalTime(NETID := '127.0.0.1.1.1', START := TRUE);
		IF _NT_GetLocalTime.BUSY AND NOT _NT_GetLocalTime.ERR THEN 
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 220 THEN
		_NT_GetLocalTime(START := FALSE);
		IF NOT _NT_GetLocalTime.BUSY AND NOT _NT_GetLocalTime.ERR THEN 
			_state := _state + 10;
		END_IF
	END_IF
	
	IF _state = 230 THEN
		_PDT := _NT_GetLocalTime.TIMESTR;
		_isValid := TRUE;
		_NT_GetSyncTime(START := FALSE);
		_NT_GetLocalTime(START := FALSE);
		_NT_SetLocalTime(START := FALSE);
		
		IF _RtcSynchParams.doSynch THEN
			IF (_timeTick - _lastSyncTick) / 1000000000  >= _RtcSynchParams.syncPeriod THEN
				_state := 0;
			ELSE
				_state := 210;
			END_IF
		ELSE
			_state := 210;
		END_IF
	END_IF
END_IF	

_RTC_EX2(EN := _isValid , PDT := _PDT);

_LocalTime := _RTC_EX2.CDT;
_FB_TzSpecificLocalTimeToSystemTime(in 		:=	_LocalTime,
									tzInfo 	:=	_TimeZoneInformation,
									out		=>	_UTCTime,
									eTzID	=>	_TimeZoneID);
									
_LocalTimeDT := Tc2_Utilities.SYSTEMTIME_TO_DT(_LocalTime);
_UTCTimeDT := Tc2_Utilities.SYSTEMTIME_TO_DT(_UTCTime);

_timeTick :=  Tc2_EtherCAT.F_GetActualDcTime64(); ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>