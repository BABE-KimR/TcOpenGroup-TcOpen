<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="TcoContext" Id="{55d37a51-70a7-4749-9f28-95ccbcaee495}" SpecialFunc="None">
    <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Basic construction container encapsulating TcoObjects, provides possibility to detect if its child member is called cyclically.
			This function block is abstract so it cannot be instantiated and must be extended. The <see cref="TcoContext.PlcTcoContext.Run()"/> of the extended instance must be 
			called only once per plc cycle inside one Twincat PlcTask.
			Several TcoContext instances could be called inside one Twincat PlcTask, but only once per plc cycle. One instance must not be called inside several Twincat PlcTask.
			The TcoContext child members could ask theirs parents TcoContext for the values of the properties <see cref="TcoContext.PlcTcoContext.StartCycleCount()"/> and <see cref="TcoContext.PlcTcoContext.EndCycleCount()"/>. 
			Comparing with theirs internal values they could determine if they were called in the previous plc cycle. Depending on their settings they could provide AutoRestorable mechanism on themselves or on theirs child members.
			<note type="tip">
				For example, one TcoContext could contain all objects, components and PLC logic of one independent station of the machine, while the second TcoContext could contain all the objects of the second station of the same machine.
				In this way, stations can be separated to prevent access from one station to another.
			</note>
			<remarks>			
				<note type="caution">
					Do not confuse Twincat PlcTask with <see cref="TcoTask.PlcTcoTask()"/>.
				</note>
			</remarks>			
		</summary>			
	</docu>	
~*)
FUNCTION_BLOCK PUBLIC ABSTRACT TcoContext IMPLEMENTS ITcoContext
VAR
(*~
	<docu>
		<summary>
			The own identity of the TcoContext.
			This variable is used in the higher level packages.  
		</summary>			
	</docu>	
~*)
	{attribute clr [RenderIgnore()]}
	{attribute clr [ReadOnly()]}
	_Identity : ULINT;
	{attribute 'hide'}
	_startCycleCount : ULINT;
	{attribute 'hide'}
	_endCycleCount : ULINT;
	{attribute 'hide'}
	_Messenger : TcoMessenger(THIS^); 
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Close" Id="{75878743-2aed-4461-9dcd-3dcede9d89a5}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			This method is called at the end of the TcoContext. Implicit calling of this method is ensured by calling the method <see cref="TcoContext.PlcTcoContext.Run()"/>.
			<remarks>			
				<note type="important">
					Do not call this method explicitly.
				</note>
			</remarks>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED FINAL Close]]></Declaration>
      <Implementation>
        <ST><![CDATA[_endCycleCount := _startCycleCount;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Context" Id="{63063553-badc-4ce8-a8c6-8619f5f133f3}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Returns the reference to this instance of the <see cref="TcoContext.PlcTcoContext()"/>.
		</summary>			
	</docu>	
~*)
PROPERTY Context : ITcoContext]]></Declaration>
      <Get Name="Get" Id="{892fc39b-0726-4b20-b0e0-f4be7b7e4106}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Context := THIS^;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="EndCycleCount" Id="{4bd5fb2b-81cd-4c36-8e15-26aba6b66c8a}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Value of this property is set at the end of the <see cref="TcoContext.PlcTcoContext()"/>, in the method <see cref="TcoContext.PlcTcoContext.Close()"/> to the value of <see cref="TcoContext.PlcTcoContext.StartCycleCount"/> property.
		</summary>			
	</docu>	
~*)
PROPERTY EndCycleCount : ULINT]]></Declaration>
      <Get Name="Get" Id="{095042f2-367c-44fe-aa5f-66cbd722b7e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[EndCycleCount := _endCycleCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{589fd291-1ab8-4b98-a0a8-8d493e4b98c7}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Identity := ADR(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Identity" Id="{a551eec9-c5bd-4df5-9bc0-f8e8eaa3edde}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Returns the own identity of the <see cref ="TcoContext.PlcTcoContext()"/>. This value is assigned after download by calling the implicit method <c>FB_init()</c> and cannot be changed during runtime.
			This variable is used in the higher level packages.  
		</summary>			
	</docu>	
~*)
PROPERTY Identity : ULINT]]></Declaration>
      <Get Name="Get" Id="{af84927a-5c14-4bee-90d2-b1f9bf5c7a59}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Identity := _Identity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Main" Id="{a4678500-dacf-4449-bf3c-2b4f4414d6a6}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Main method of the TcoContext. Custom code needs to be placed here, calling of the methods <see cref="TcoContext.PlcTcoContext.Open()"/> at the beggining 
			and <see cref="TcoContext.PlcTcoContext.Close()"/> at the end is ensured by calling the <c>InstanceName.Run()</c> method.
			This method is abstract, so each derived type has to implement its own implementation of this method.
		</summary>
	</docu>
~*)
METHOD PROTECTED ABSTRACT Main]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Open" Id="{d862846f-7f33-47b7-aa0a-9f3ebf516821}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			This method is called at the beginning of the TcoContext. Implicit calling of this method is ensured by calling the method <see cref="TcoContext.PlcTcoContext.Run()"/>.
			<remarks>			
				<note type="important">
					Do not call this method explicitly.
				</note>
			</remarks>
		</summary>			
	</docu>	
~*)
METHOD PROTECTED FINAL Open]]></Declaration>
      <Implementation>
        <ST><![CDATA[_startCycleCount := _startCycleCount + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Run" Id="{c20d2d3c-fd63-4a1d-8862-cb4f91ebaf8c}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			<para>
				Ensures calling the <see cref="TcoContext.PlcTcoContext.Open()"/>, <see cref="TcoContext.PlcTcoContext.Main()"/> and <see cref="TcoContext.PlcTcoContext.Close()"/> methods in the desired order.
				This method is final, so it cannot be overloaded. The <c>InstanceName.Run()</c> needs to be called cyclically.
			</para>
		</summary>			
	</docu>	
~*)
METHOD PUBLIC FINAL Run]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Open();
THIS^.Main();
THIS^.Close();]]></ST>
      </Implementation>
    </Method>
    <Property Name="StartCycleCount" Id="{bfc0527d-ea91-4a81-9e56-7fd6b0f76c09}">
      <Declaration><![CDATA[(*~
	<docu>
		<summary>
			Value of this property is incremented at the beginning of the <see cref="TcoContext.PlcTcoContext()"/>, in the method <see cref="TcoContext.PlcTcoContext.Open()"/>.
			By comparing this value with the internal values of the child members they are able to determine if they were called in the previous plc cycle. 
			Depending on their settings they could provide AutoRestorable mechanism on themselves or on theirs child members.
		</summary>			
	</docu>	
~*)
PROPERTY StartCycleCount : ULINT]]></Declaration>
      <Get Name="Get" Id="{72057c13-7a51-41fe-9542-bf3438a07393}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[StartCycleCount := _startCycleCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>