using NUnit.Framework;
using TcOpen;
using Tc.Prober.Runners;
using Tc.Prober.Recorder;
using System.Reflection;
using System.IO;

namespace nUnitTcOpenTests
{
    public class fbCylinderTests
    {
        fbCylinder sut;

        [OneTimeSetUp()]
        public void OneTimeSetUp()
        {
            Entry.TcOpen.Connector.BuildAndStart();
            sut = Entry.TcOpen.MAIN._wpfCyclinder;
            var executingAssembly = new FileInfo(Assembly.GetExecutingAssembly().Location);
            Runner.RecordingsShell = Path.GetFullPath(Path.Combine(executingAssembly.DirectoryName, @"..\..\..\recodrings"));
        }

        [Test]
        [Timeout(10000)]
        public void MoveCylinderToHomeTest()
        {
            sut.Run(a => a._MoveToHomeTest() & a.Simulate());            
            Assert.IsFalse(sut.inAtWorkPos.Synchron);
            Assert.IsTrue(sut.inAtHomePos.Synchron);
            Assert.IsTrue(sut.outToHomePos.Synchron);
            Assert.False(sut.outToWorkPos.Synchron);
        }

        [Test]
        [Timeout(10000)]
        public void MoveCylinderToWorkTest()
        {
            sut.Run(a => a._MoveToWorkTest() & a.Simulate());            
            Assert.IsTrue(sut.inAtWorkPos.Synchron);
            Assert.IsFalse(sut.inAtHomePos.Synchron);
            Assert.IsFalse(sut.outToHomePos.Synchron);
            Assert.IsTrue(sut.outToWorkPos.Synchron);
        }

        private RecorderModeEnum mode = RecorderModeEnum.Player;
        

        [Test]
        [Timeout(10000)]
        public void MoveCylinderToWorkTestWithRecording()
        {                      
            var actor = new Recorder<fbCylinder, PlainfbCylinder>(sut, mode, 1).Actor;
            var done = false;

            sut.Run(() => { done = sut._MoveToWorkTest(); return done; },
                    () => { return done; },
                    null,
                    null,
                    actor,
                    Path.Combine(Runner.RecordingsShell, $"{nameof(MoveCylinderToWorkTestWithRecording)}.json"));

            Assert.IsTrue(sut.inAtWorkPos.Synchron);
            Assert.IsFalse(sut.inAtHomePos.Synchron);
            Assert.IsFalse(sut.outToHomePos.Synchron);
            Assert.IsTrue(sut.outToWorkPos.Synchron);
        }

        [Test]
        [Timeout(10000)]
        public void MoveCylinderToHomeTestWithRecording()
        {
            var actor = new Recorder<fbCylinder, PlainfbCylinder>(sut, mode, 1).Actor;
            var done = false;

            sut.Run(() => { done = sut._MoveToHomeTest(); return done; },
                    () => { return done; },
                    null,
                    null,
                    actor,
                    Path.Combine(Runner.RecordingsShell, $"{nameof(MoveCylinderToHomeTestWithRecording)}.json"));

            Assert.IsFalse(sut.inAtWorkPos.Synchron);
            Assert.IsTrue(sut.inAtHomePos.Synchron);
            Assert.IsTrue(sut.outToHomePos.Synchron);
            Assert.False(sut.outToWorkPos.Synchron);
        }
    }
}