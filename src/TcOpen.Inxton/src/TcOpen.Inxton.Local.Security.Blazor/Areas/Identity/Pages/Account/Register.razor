@page "/Identity/Account/Register"

@inject SignInManager<User> SignInManager
@inject NavigationManager _navigationManager
@inject UserManager<User> UserManager
<h3>Register</h3>



<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="_model.UserName" class="form-control" />
                <ValidationMessage For="@(() => _model.UserName)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="_model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <button class="btn btn-primary">
                Register
            </button>

        </EditForm>
    </div>
</div>

@code {
    private RegisterUser _model = new RegisterUser();
    private User _user { get; set; }
    // public MongoDbRepository<UserData> MongoRepo { get; set; }


    protected override void OnInitialized()
    {
        //MongoRepo = new MongoDbRepository<UserData>(new MongoDbRepositorySettings<UserData>("mongodb://localhost:27017", "Hammer", "Users"));
    }

    private async void OnValidSubmit()
    {
        //model.UserName = model.Username;
        _user = new User
        {
            UserName = _model.UserName,
            


        };

        var result = await UserManager.CreateAsync(_user, _model.Password);

        if (result.Succeeded)
        {

            _navigationManager.NavigateTo("/Identity/Account/Login", true);


        }
        else
        {
            _navigationManager.NavigateTo("/");
        }


    }
}
