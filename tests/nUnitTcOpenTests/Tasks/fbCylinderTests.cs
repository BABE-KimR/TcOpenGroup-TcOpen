using NUnit.Framework;
using TcOpen;
using Tc.Prober.Runners;
using Tc.Prober.Recorder;
using System.Reflection;
using System.IO;

namespace nUnitTcOpenTests
{
    public class fbTaskTests
    {
        TcOpen.fbTaskTests sut;
        const int STANDARD_TEST_TIMEOUT = 1000;
        const int STANDARD_INTER_CALL_DELAY = 100;

        [OneTimeSetUp()]
        public void OneTimeSetUp()
        {
            Entry.TcOpen.Connector.BuildAndStart();
            sut = Entry.TcOpen.MAIN_TESTS._taskTests;
            var executingAssembly = new FileInfo(Assembly.GetExecutingAssembly().Location);
            Runner.RecordingsShell = Path.GetFullPath(Path.Combine(executingAssembly.DirectoryName, @"..\..\..\recodrings"));
        }

        [SetUp]
        public void TestSetup()
        {
            for (int i = 0; i < sut.NUMBER_OF_TASKS.Synchron + 1; i++)
            {
                sut._task_done_condition[i].Synchron = false;
                sut._task_fail_condition[i].Synchron = false;
                sut.ResetTask((ushort)i);
            }            
        }

        [Test]
        [Timeout(STANDARD_TEST_TIMEOUT)]        
        public void Invoke_with_done_single_task()
        {
            sut.Run(a =>
            {
                var done = a.InvokeTaskTests_with_done(0);                         
                a._task_done_condition[0].Synchron = true;              
                return done;
            });         
        }

        [Test]
        [Timeout(STANDARD_TEST_TIMEOUT)]
        public void Invoke_single_task_async_than_ask_for_done()
        {
            // Arrange
            ushort taskIndex = 0;
            var task = sut._tasks[taskIndex];
            var taskDoneCondition = sut._task_done_condition[taskIndex];

            // Act - Invoke task
            sut.Run(a => { sut.InvokeTaskTest(taskIndex); return false; }, 1);
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);
            
            // Assert - Invoke task
            Assert.IsTrue((short)eTaskState.Request == task._taskState.Synchron
                          ||
                          (short)eTaskState.Executing == task._taskState.Synchron);
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Act - Done condition 'true'
            taskDoneCondition.Synchron = true;   
            
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);
            
            // Assert - Done state
            Assert.AreEqual((short)eTaskState.Done, task._taskState.Synchron);

            // Act - Ask for done
            sut.Run(a => { sut.InvokeTaskTests_with_done(taskIndex); return false; }, 1);

            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Assert - Ask for done
            Assert.AreEqual((short)eTaskState.Idle, task._taskState.Synchron);
        }

        [Test]
        [Timeout(STANDARD_TEST_TIMEOUT)]
        public void Invoke_single_task_with_fail_ask_for_done_holds_error()
        {
            // Arrange
            ushort taskIndex = 0;
            var task = sut._tasks[taskIndex];
            var errorCondition = sut._task_fail_condition[taskIndex];

            // Act - Invoke task
            sut.Run(a => { sut.InvokeTaskTest(taskIndex); return false; }, 1);
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Assert - Invoke task
            Assert.IsTrue((short)eTaskState.Request == task._taskState.Synchron
                          ||
                          (short)eTaskState.Executing == task._taskState.Synchron);
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Act - Error condition 'true'
            errorCondition.Synchron = true;

            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Assert - Done state
            Assert.AreEqual((short)eTaskState.Error, task._taskState.Synchron);

            // Act - Ask for done
            sut.Run(a => { sut.InvokeTaskTests_with_done(taskIndex); return false; }, 1);

            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Assert - Ask for done
            Assert.AreEqual((short)eTaskState.Error, task._taskState.Synchron);
        }

        [Test]
        [Timeout(STANDARD_TEST_TIMEOUT)]
        public void Invoke_single_task_with_fail_reset_to_idle()
        {
            // Arrange
            ushort taskIndex = 0;
            var task = sut._tasks[taskIndex];
            var errorCondition = sut._task_fail_condition[taskIndex];

            // Act - Invoke task
            sut.Run(a => { sut.InvokeTaskTest(taskIndex); return false; }, 1);
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Assert - Invoke task
            Assert.IsTrue((short)eTaskState.Request == task._taskState.Synchron
                          ||
                          (short)eTaskState.Executing == task._taskState.Synchron);
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Act - Error condition 'true'
            errorCondition.Synchron = true;
            System.Threading.Thread.Sleep(STANDARD_INTER_CALL_DELAY);

            // Assert - Done state
            Assert.AreEqual((short)eTaskState.Error, task._taskState.Synchron);

            // Act - Ask for done
            sut.Run(a => { sut.ResetTask(taskIndex); return false; }, 1);

            // Assert - Ask for done
            Assert.AreEqual((short)eTaskState.Idle, task._taskState.Synchron);
        }

        [Test]
        [Timeout(STANDARD_TEST_TIMEOUT)]
        public void Invoke_with_done_multiple_tasks()
        {
            // This test actually proves nothing... juts for sake of running more tasks
          
            ushort taskIndex = 0;            
            foreach (fbTask _task in sut._tasks)
            {
                sut.InvokeTaskTests_with_done(taskIndex++);               
            }
                 
            foreach (fbTask _task in sut._tasks)
            {
                Assert.AreEqual((short)eTaskState.Executing, _task._taskState.Synchron);            
            }

            taskIndex = 0;
            foreach (fbTask _task in sut._tasks)
            {
                sut._task_done_condition[taskIndex++].Synchron = true;
            }

            taskIndex = 0;
            foreach (fbTask _task in sut._tasks)
            {
                sut.InvokeTaskTests_with_done(taskIndex++);                
            }

            foreach (var task in sut._tasks)
            {
                Assert.AreEqual((short)eTaskState.Idle, task._taskState.Synchron);
            }
        }
    }
}