<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="TcoTaskTest" Id="{9aa8db61-0cc6-40c6-9397-95033027855c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TcoTaskTest EXTENDS TcoTask
VAR
	_IsBusy							:	BOOL;	
	_IsError						:	BOOL;	
	_IsDone							:	BOOL;	
	_IsReady						:	BOOL;	
	_CounterSetValue				:	ULINT;
	_CounterValue					:	ULINT;
	_InvokeCounter					:	ULINT;
	_ExecuteCounter					:	ULINT;
	_DoneCounter					:	ULINT;	
	_InvokeRisingEdgeCounter		:	ULINT;
	_ExecuteRisingEdgeCounter		:	ULINT;
	_DoneRisingEdgeCounter			:	ULINT;	
	_PreviousState					:	eTaskState;
	_CounterValuePV					:	ULINT;
	_MyIdentity						:	ULINT;
	_MyContextIdentity				:	ULINT;
	_MyContextStartCount 			:	ULINT;
	_MyContextEndCount				:	ULINT;	
	_MyParentIdentity				:	ULINT;
	_AutoRestoreByMyParentEnabled	:	BOOL;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ExecutionBody();]]></ST>
    </Implementation>
    <Method Name="Disable" Id="{30e8d443-19f6-08b1-1d86-48a460b2b63c}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL Disable]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Enabled := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{cd30d735-ff17-02c7-26d6-c091a49a074d}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL Enable]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Enabled := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExecutionBody" Id="{77a5a45d-9cd7-4d75-83c5-1e7025fc00d2}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL ExecutionBody]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(THIS^._taskState = eTaskState.Requested) THEN
	_InvokeCounter := _InvokeCounter + 1; 
END_IF;

IF(THIS^._taskState = eTaskState.Requested AND _PreviousState <> eTaskState.Requested) THEN
	_CounterValue	:=	_CounterSetValue;
	_CounterValuePV := _CounterValue;
	_InvokeRisingEdgeCounter := _InvokeRisingEdgeCounter + 1;
END_IF

IF(THIS^._taskState = eTaskState.Busy AND _PreviousState <> eTaskState.Busy) THEN
	_ExecuteRisingEdgeCounter := _ExecuteRisingEdgeCounter + 1;
END_IF

_PreviousState	:=	THIS^._taskState;

IF(Execute()) THEN
	_ExecuteCounter := _ExecuteCounter + 1;	
	_CounterValue := _CounterValue - 1;
	DoneWhen(_CounterValue <= 0);			
	ThrowWhen(ABS(_CounterValuePV -_CounterValue) > 1);
	_CounterValuePV := _CounterValue;
END_IF

IF(THIS^._taskState = eTaskState.Done) THEN
	_DoneCounter := _DoneCounter + 1; 
END_IF;

IF(THIS^._taskState = eTaskState.Done AND _PreviousState <> eTaskState.Done) THEN
	_DoneRisingEdgeCounter := _DoneRisingEdgeCounter + 1; 
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMessage" Id="{8e6f936b-bc35-4ef7-a147-2025c495357f}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL GetMessage : STRING]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetMessage := SUPER^._messenger._mime.Text;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PostMessage" Id="{5fc16e78-a33a-4b3d-b72e-63dff904b3c2}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL PostMessage
VAR_INPUT
	Message	:	STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Messenger.Post(Message ,eMessageCategory.Error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadOutAutoRestoreProperties" Id="{5b83d008-369d-4819-8af0-9c589c21787c}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL ReadOutAutoRestoreProperties]]></Declaration>
      <Implementation>
        <ST><![CDATA[_AutoRestoreByMyParentEnabled	:= THIS^.AutoRestorable;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadOutIdentities" Id="{97964902-e608-40e8-94bf-85004e67f007}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL ReadOutIdentities]]></Declaration>
      <Implementation>
        <ST><![CDATA[_MyIdentity			:=	THIS^.Identity;

_MyContextIdentity	:=	THIS^.Context.Identity;
		
_MyContextStartCount :=	THIS^.Context.StartCycleCount;

_MyContextEndCount	:=	THIS^.Context.EndCycleCount;

_MyParentIdentity	:=	THIS^._Parent.Identity;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadOutState" Id="{8a834a60-c289-4ad1-a649-a06b124cc84a}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL ReadOutState]]></Declaration>
      <Implementation>
        <ST><![CDATA[_IsBusy		:=	THIS^.Busy;	
_IsError	:=	THIS^.Error;	
_IsDone		:=	THIS^.Done;	
_IsReady	:=	THIS^.Ready;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetPreviousStateToReady" Id="{5b4ca5af-515c-4456-914e-015624dcdd9a}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL SetPreviousStateToReady]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^._PreviousState := eTaskState.Ready;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerAbort" Id="{fb8d5aab-1b46-4b74-a563-a929ff61965a}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL TriggerAbort]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Abort();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerInvoke" Id="{eaf79119-f66d-4e8d-8769-8d600bac760b}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL TriggerInvoke]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Invoke();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerRestore" Id="{bc4db07e-7c8f-4208-80ac-22e04a9c54df}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable'}
METHOD INTERNAL TriggerRestore]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Restore();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>